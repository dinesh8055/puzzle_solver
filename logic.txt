Project 1
The program solves the clock puzzle. It takes the present clock hand reading and maximum number of hours and shows the shortest 
path to the goal configuration. 

The following algorithm is used to solve the puzzle:
 1. Start configuration is checked if it's the required goal.
 2. If not, clockwise rotations and anti-clockwise configurations are generated and stored in a queue.
 3. Shortest path is the one with the smaller sized queue.
 4. The shorter queue is then displayed as the required steps to reach the goal configuration.

 
Project 2
The program solves the water puzzle. It takes the number of buckets and their capacities from the user and the goal water quantity 
to solve the famous water jug puzzle.

The following algorithm is used to solve the puzzle:
 1. Start configuration with buckets empty is pushed onto a queue.
 2. The next possible configurations for the start configuration is then returned from getNextConfig and is checked one at a time 
    if it meets the goal configuration.
 3. The successful configurations leading to the goal are stored in a map and pushed onto a stack for displaying.
 

Project 3
The program solves Lloyd's puzzle. The start and goal configurations are given in the form of a file as command line arguments.

The following algorithm is used to solve the puzzle:
 1. Start configuration in the given file is pushed onto a list
 2. The next possible configurations for the start configuration is then
    returned from getNext and is checked one at a time if it meets the
    goal configuration.
 3. The successful configurations leading to the goal are stored in a map
    and pushed onto a stack for displaying

